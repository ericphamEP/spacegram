{"version":3,"sources":["service/ApiQueryBuilder.ts","service/ImageService.tsx","store/ImageStore.ts","store/ImageUiStore.ts","view-image-list/ImagePreview.tsx","view-image-list/GridView.tsx","view-image-list/ImageListPreview.tsx","view-image-list/ListView.tsx","view-image-list/SearchPage.tsx","view-image-list/QueryBar.tsx","view-image-list/LikedImages.tsx","view-asset/AssetModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiQueryBuilder","root","search","filters","page","assetId","a","params","q","nasa_id","media_type","axios","get","this","response","totalImagesCount","data","collection","metadata","total_hits","imageDataList","items","map","imageItem","_mapResponseDataToFormattedData","images","assetIds","concat","length","_mapResponseDataToFormattedDataFull","resData","id","title","imgUrl","links","href","date","date_created","description","image","location","center","keywords","ImageService","queryService","getImages","_showError","getImagesFromIds","imageDetails","undefined","getImageDetails","msg","err","notification","message","console","log","ImageStore","imageService","imagesList","likedImages","likedImagesList","onLike","localStorage","setItem","JSON","stringify","fetchLikedImages","setImagesList","setTotalImagesCount","count","setLikedImagesList","setImageDetails","imageData","makeAutoObservable","initialLikedImages","getItem","parse","getImagesSearch","imagesObj","Object","keys","imageObj","ImageUiStore","imageStore","currentSearch","isLoading","isLikeLoading","isDetailsLoading","isDetailsOpen","isListView","loadImageDetails","setIsDetailsLoading","setIsDetailsOpen","fetchImageDetails","newSearch","setPage","status","newPage","setIsLoading","fetchImagesSearch","setIsLikeLoading","Meta","Card","Paragraph","Typography","ImagePreview","hoverable","size","style","height","margin","overflow","cover","marginTop","display","marginLeft","marginRight","alt","props","src","actions","FileSearchOutlined","onClick","onDetail","liked","HeartFilled","HeartOutlined","Fragment","ellipsis","rows","moment","format","React","Component","GridView","observer","gutter","span","imageUiStore","Item","List","ImageListPreview","extra","width","ListView","itemLayout","bordered","padding","backgroundColor","Title","SearchPage","loadSearchResults","getIsLoading","level","getIsListView","QueryBar","showTotalAssets","total","range","onPageChange","onViewChange","checked","setIsListView","currentPage","getPage","current","showTotal","pageSize","showQuickJumper","showSizeChanger","onChange","paddingBottom","offset","textAlign","checkedChildren","PictureOutlined","unCheckedChildren","UnorderedListOutlined","defaultChecked","Text","LikedImages","loadLikedImages","grid","xs","sm","md","lg","xl","xxl","dataSource","renderItem","getIsLikeLoading","Descriptions","AssetModal","handleClose","resetImageDetails","visible","getIsDetailsOpen","loading","getIsDetailsLoading","onOk","onCancel","footer","minWidth","paddingTop","label","word","toLowerCase","Header","Layout","Content","Footer","Search","Input","Panel","Collapse","App","handleSearch","setSearch","minHeight","color","defaultActiveKey","marginBottom","header","placeholder","onSearch","enterButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ec5f229.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport axios from \"axios\";\r\nimport { Images, Image, FilterParams, AssetDetails, ImageDataFull } from \"./ImageInterfaces\";\r\n\r\nexport class ApiQueryBuilder {\r\n    root = \"https://images-api.nasa.gov\";\r\n\r\n    async getImages(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<Images> {\r\n        /*\r\n        Send request for images using search endpoint\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        :return: Images object with list and count\r\n        */\r\n        const params = {q: search, page, nasa_id: assetId, media_type: \"image\", ...filters};\r\n        const response = await axios.get(`${this.root}/search`, { params });\r\n        const totalImagesCount = response.data.collection.metadata.total_hits;\r\n        const imageDataList = response.data.collection.items.map((imageItem: any) => this._mapResponseDataToFormattedData(imageItem))\r\n        return {images: imageDataList, totalImagesCount };\r\n    }\r\n\r\n    async getImagesFromIds(assetIds: string[]): Promise<Images> {\r\n        /*\r\n        Send requests for images using search endpoint and assetId params\r\n        :input assetIds: List of NASA ID strings\r\n        :return: Images object with list and count\r\n        */\r\n        let imageDataList: Image[] = [];\r\n        for (const assetId of assetIds) {\r\n            const params = {nasa_id: assetId, media_type: \"image\"};\r\n            const response = await axios.get(`${this.root}/search`, { params });\r\n            imageDataList = imageDataList.concat(response.data.collection.items.map((imageItem: any) => this._mapResponseDataToFormattedData(imageItem)));\r\n        }\r\n        return {images: imageDataList, totalImagesCount: imageDataList.length };\r\n    }\r\n\r\n    async getImageDetails(assetId: string): Promise<AssetDetails> {\r\n        /*\r\n        Send request for image using search endpoint, get full details\r\n        :input assetId: NASA ID string\r\n        :return: Image object with full details\r\n        */\r\n        const response = await axios.get(`${this.root}/search`, {params: {nasa_id: assetId}});\r\n        return this._mapResponseDataToFormattedDataFull(response.data.collection.items[0]);\r\n    }\r\n\r\n    private _mapResponseDataToFormattedData(resData: any): Image {\r\n        return {\r\n            id: resData.data[0].nasa_id,\r\n            title: resData.data[0].title,\r\n            imgUrl: resData.links[0].href,\r\n            date: resData.data[0].date_created,\r\n            description: resData.data[0].description,\r\n        } as Image\r\n    }\r\n\r\n    private _mapResponseDataToFormattedDataFull(resData: any): AssetDetails {\r\n        return {\r\n            image: {\r\n                ...this._mapResponseDataToFormattedData(resData),\r\n                location: resData.data[0].location,\r\n                center: resData.data[0].center,\r\n                keywords: resData.data[0].keywords,\r\n            } as ImageDataFull\r\n        } \r\n    }\r\n}","import { ApiQueryBuilder } from \"./ApiQueryBuilder\";\r\nimport { Images, FilterParams, AssetDetails } from \"./ImageInterfaces\";\r\nimport { notification } from \"antd\";\r\n\r\nexport class ImageService {\r\n    queryService = new ApiQueryBuilder();\r\n\r\n    async getImagesSearch(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<Images> {\r\n        /*\r\n        Search images using variety of params\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        :return: Images object with list and count\r\n        */\r\n        let images: Images = {images: [], totalImagesCount: 0};\r\n        try {\r\n            images = await this.queryService.getImages(search, filters, page, assetId);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch images for search\", err);\r\n        }\r\n        return images;\r\n    }\r\n\r\n    async getImagesFromIds(assetIds: string[]): Promise<Images> {\r\n        /*\r\n        Search images with list of IDs\r\n        :input assetIds: List of NASA ID strings\r\n        :return: Images object with list and count\r\n        */\r\n        let images: Images = {images: [], totalImagesCount: 0};\r\n        try {\r\n            images = await this.queryService.getImagesFromIds(assetIds);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch for group of images\", err);\r\n        }\r\n        return images;\r\n    }\r\n\r\n    async getImageDetails(assetId: string): Promise<AssetDetails> {\r\n        /*\r\n        Get full image details\r\n        :input assetId: NASA ID string\r\n        :return: Image object with full details\r\n        */\r\n        let imageDetails: AssetDetails = {image: undefined};\r\n        try {\r\n            imageDetails = await this.queryService.getImageDetails(assetId);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch image details\", err);\r\n        }\r\n        return imageDetails;\r\n    }\r\n\r\n    private _showError(msg: string, err: unknown): void {\r\n        /*\r\n        Display message notification to user and log error\r\n        :input msg: Message string\r\n        :input err: Error object\r\n        */\r\n        notification['error']({\r\n            message: \"Image Service Error\",\r\n            description: msg,\r\n        });\r\n        console.log(`[image-service-error] ${err}`)\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { ImageService } from \"../service/ImageService\";\r\nimport { Image, AssetDetails, FilterParams } from \"../service/ImageInterfaces\";\r\n\r\nexport class ImageStore {\r\n    imageService = new ImageService();\r\n    imagesList: Image[] = [];\r\n    totalImagesCount = 0;\r\n    imageDetails: AssetDetails = {image: undefined};\r\n    likedImages: {[key: string]: boolean} = {};\r\n    likedImagesList: Image[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        try { // Initialize with local storage if available\r\n            const initialLikedImages = localStorage.getItem( 'likedImages' );\r\n            this.likedImages = initialLikedImages ? JSON.parse(initialLikedImages) : {}\r\n        } catch {\r\n            this.likedImages = {};\r\n        }\r\n    }\r\n\r\n    // Main functions\r\n\r\n    async fetchImagesSearch(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<void> {\r\n        /*\r\n        Fetch and save images using variety of params\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        */\r\n        const imagesObj = await this.imageService.getImagesSearch(search, filters, page, assetId);\r\n        this.setImagesList(imagesObj.images);\r\n        this.setTotalImagesCount(imagesObj.totalImagesCount);\r\n    }\r\n\r\n    async fetchLikedImages(): Promise<void> {\r\n        /*\r\n        Fetch and save liked images\r\n        */\r\n        const imagesObj = await this.imageService.getImagesFromIds(Object.keys(this.likedImages));\r\n        this.setLikedImagesList(imagesObj.images);\r\n    }\r\n\r\n    async fetchImageDetails(assetId: string): Promise<void> {\r\n        /*\r\n        Fetch and save full image details\r\n        :input assetId: NASA ID string\r\n        */\r\n        const imageObj = await this.imageService.getImageDetails(assetId);\r\n        this.setImageDetails(imageObj);\r\n    }\r\n\r\n    onLike = async (assetId: string): Promise<void> => {\r\n        /*\r\n        Save or remove liked image\r\n        :input assetId: NASA ID string\r\n        */\r\n        if (assetId in this.likedImages) {\r\n            delete this.likedImages[assetId];\r\n        } else {\r\n            this.likedImages[assetId] = true;\r\n        }\r\n        localStorage.setItem( 'likedImages', JSON.stringify(this.likedImages) ); // Save to local\r\n        await this.fetchLikedImages();\r\n    }\r\n\r\n    // Setters for observable state\r\n\r\n    setImagesList = (imagesList: Image[]): void => {\r\n        this.imagesList = imagesList;\r\n    }\r\n    setTotalImagesCount = (count: number): void => {\r\n        this.totalImagesCount = count;\r\n    }\r\n    setLikedImagesList = (imagesList: Image[]): void => {\r\n        this.likedImagesList = imagesList;\r\n    }\r\n    setImageDetails = (imageData: AssetDetails): void => {\r\n        this.imageDetails = imageData;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { ImageStore } from \"./ImageStore\";\r\nimport { FilterParams } from \"../service/ImageInterfaces\";\r\n\r\nexport class ImageUiStore {\r\n    private imageStore: ImageStore;\r\n    private currentSearch = \"\";\r\n    private filters: FilterParams = {};\r\n    private page = 1;\r\n\r\n    private isLoading = false;\r\n    private isLikeLoading = false;\r\n    private isDetailsLoading = false;\r\n    private isDetailsOpen = false;\r\n    private isListView = false;\r\n\r\n    constructor(imageStore: ImageStore) {\r\n        makeAutoObservable(this);\r\n        this.imageStore = imageStore;\r\n    }\r\n\r\n    // Getters and setters\r\n\r\n    getSearch(): string {\r\n        return this.currentSearch;\r\n    }\r\n    setSearch(newSearch: string): void {\r\n        this.currentSearch = newSearch;\r\n        this.setPage(1);\r\n    }\r\n\r\n    getIsLoading(): boolean {\r\n        return this.isLoading;\r\n    }\r\n    setIsLoading(status: boolean): void {\r\n        this.isLoading = status;\r\n    }\r\n\r\n    getIsLikeLoading(): boolean {\r\n        return this.isLikeLoading;\r\n    }\r\n    setIsLikeLoading(status: boolean): void {\r\n        this.isLikeLoading = status;\r\n    }\r\n\r\n    getIsDetailsLoading(): boolean {\r\n        return this.isDetailsLoading;\r\n    }\r\n    setIsDetailsLoading(status: boolean): void {\r\n        this.isDetailsLoading = status;\r\n    }\r\n\r\n    getIsDetailsOpen(): boolean {\r\n        return this.isDetailsOpen;\r\n    }\r\n    setIsDetailsOpen(status: boolean): void {\r\n        this.isDetailsOpen = status;\r\n    }\r\n\r\n    getIsListView(): boolean {\r\n        return this.isListView;\r\n    }\r\n    setIsListView(status: boolean): void {\r\n        this.isListView = status;\r\n    }\r\n\r\n    getPage(): number {\r\n        return this.page;\r\n    }\r\n    setPage(newPage: number): void {\r\n        this.page = newPage;\r\n    }\r\n\r\n    resetImageDetails(): void {\r\n        this.imageStore.setImageDetails({image: undefined});\r\n    }\r\n\r\n    // Interact with main store\r\n\r\n    async loadSearchResults(): Promise<void> {\r\n        /*\r\n        Load search results\r\n        */\r\n        this.setIsLoading(true);\r\n        await this.imageStore.fetchImagesSearch(this.currentSearch, this.filters, this.page);\r\n        this.setIsLoading(false);\r\n    }\r\n\r\n    async loadLikedImages(): Promise<void> {\r\n        /*\r\n        Load liked images\r\n        */\r\n        this.setIsLikeLoading(true);\r\n        await this.imageStore.fetchLikedImages();\r\n        this.setIsLikeLoading(false);\r\n    }\r\n\r\n    loadImageDetails = async (assetId: string): Promise<void> => {\r\n        /*\r\n        Load full image details\r\n        :input assetId: NASA ID string\r\n        */\r\n        this.setIsDetailsLoading(true);\r\n        this.setIsDetailsOpen(true);\r\n        await this.imageStore.fetchImageDetails(assetId);\r\n        this.setIsDetailsLoading(false);\r\n    }\r\n}","import React from 'react';\r\nimport { Card, Typography } from 'antd';\r\nimport moment from 'moment';\r\nimport { HeartOutlined, HeartFilled, FileSearchOutlined } from '@ant-design/icons';\r\nimport { Image } from \"./../service/ImageInterfaces\";\r\n\r\nconst { Meta } = Card;\r\nconst { Paragraph } = Typography;\r\n\r\ninterface SearchPageProps {\r\n  image: Image,\r\n  liked: boolean,\r\n  onLike: (assetId: string) => void,\r\n  onDetail: (assetId: string) => void,\r\n}\r\n\r\nexport class ImagePreview extends React.Component<SearchPageProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Card\r\n        hoverable\r\n        size=\"small\"\r\n        style={{ height: 510, margin: 10, overflow: 'hidden' }}\r\n        cover={\r\n          <div style={{ overflow: \"hidden\", height: \"280px\", marginTop: 20 }}>\r\n            <img\r\n              style={{ height: \"100%\", display: 'block', marginLeft: \"auto\", marginRight: \"auto\" }}\r\n              alt={this.props.image.id}\r\n              src={this.props.image.imgUrl}\r\n            />\r\n          </div>\r\n        }\r\n        actions={[\r\n          <FileSearchOutlined key=\"details\" onClick={() => this.props.onDetail(this.props.image.id)} />,\r\n          this.props.liked ? <HeartFilled onClick={() => this.props.onLike(this.props.image.id)} /> :\r\n          <HeartOutlined onClick={() => this.props.onLike(this.props.image.id)} />,\r\n        ]}\r\n      >\r\n        <Meta\r\n          title={this.props.image.title}\r\n          description={<React.Fragment><Paragraph ellipsis={{rows: 1}}>{moment(this.props.image.date).format(\"MMM D YYYY, h:mm:ss a\")}</Paragraph><Paragraph ellipsis={{rows: 3}}>{this.props.image.description}</Paragraph></React.Fragment>}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\nimport { Row, Col } from 'antd';\r\nimport { ImagePreview } from './ImagePreview';\r\n\r\ninterface GridViewProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class GridView extends React.Component<GridViewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Row gutter={16}>\r\n        {\r\n          this.props.imageStore.imagesList.map((imageData) => {\r\n            return <Col span={6} key={imageData.id}><ImagePreview image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} /></Col>\r\n          })\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { List, Typography } from 'antd';\r\nimport moment from 'moment';\r\nimport { HeartOutlined, HeartFilled, FileSearchOutlined } from '@ant-design/icons';\r\nimport { Image } from \"./../service/ImageInterfaces\";\r\n\r\nconst { Item } = List\r\nconst { Paragraph } = Typography;\r\n\r\ninterface ImageListPreviewProps {\r\n  image: Image,\r\n  liked: boolean,\r\n  onLike: (assetId: string) => void,\r\n  onDetail: (assetId: string) => void,\r\n}\r\n\r\n@observer\r\nexport class ImageListPreview extends React.Component<ImageListPreviewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Item\r\n        key={this.props.image.id}\r\n        actions={[\r\n          <FileSearchOutlined key=\"details\" onClick={() => this.props.onDetail(this.props.image.id)} />,\r\n          this.props.liked ? <HeartFilled onClick={() => this.props.onLike(this.props.image.id)} /> :\r\n          <HeartOutlined onClick={() => this.props.onLike(this.props.image.id)} />,\r\n        ]}\r\n        extra={\r\n          <img\r\n            width={350}\r\n            alt={this.props.image.id}\r\n            src={this.props.image.imgUrl}\r\n          />\r\n        }\r\n      >\r\n        <Item.Meta\r\n          title={this.props.image.title}\r\n          description={moment(this.props.image.date).format(\"MMM D YYYY, h:mm:ss a\")}\r\n        />\r\n        {<Paragraph ellipsis={{rows: 3}}>{this.props.image.description}</Paragraph>}\r\n      </Item>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { List } from 'antd';\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\nimport { ImageListPreview } from './ImageListPreview';\r\n\r\ninterface ListViewProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class ListView extends React.Component<ListViewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <List\r\n        itemLayout=\"vertical\"\r\n        size=\"large\"\r\n        bordered\r\n        style={{padding: 70, backgroundColor: 'white'}}\r\n      >\r\n        {\r\n          this.props.imageStore.imagesList.map((imageData) => {\r\n            return <ImageListPreview key={imageData.id} image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} />\r\n          })\r\n        }\r\n      </List>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { Row, Col, Typography, Spin } from 'antd';\r\nimport { GridView } from './GridView';\r\nimport { ListView } from './ListView';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface SearchPageProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class SearchPage extends React.Component<SearchPageProps, {}> {\r\n  async componentDidMount(): Promise<void> {\r\n    await this.props.imageUiStore.loadSearchResults();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <Row gutter={8}>\r\n        {\r\n          this.props.imageUiStore.getIsLoading() ? <Spin size=\"large\" /> :\r\n          this.props.imageStore.imagesList.length <= 0 ? <Col span={8}><Title level={2}>No results :(</Title></Col> :\r\n          this.props.imageUiStore.getIsListView() ? <ListView imageStore={this.props.imageStore} imageUiStore={this.props.imageUiStore} /> : \r\n          <GridView imageStore={this.props.imageStore} imageUiStore={this.props.imageUiStore} />\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { Col, Pagination, Row, Switch } from 'antd';\r\nimport { PictureOutlined, UnorderedListOutlined } from '@ant-design/icons';\r\n\r\ninterface QueryBarProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class QueryBar extends React.Component<QueryBarProps, {}> {\r\n  showTotalAssets = (total: number, range: number[]): string => {\r\n    return `${range[0]}-${range[1]} of ${total} items`;\r\n  }\r\n  onPageChange = (page: number): void => {\r\n    this.props.imageUiStore.setPage(page);\r\n    this.props.imageUiStore.loadSearchResults();\r\n  }\r\n  onViewChange = (checked: boolean): void => {\r\n    this.props.imageUiStore.setIsListView(!checked);\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const currentPage = this.props.imageUiStore.getPage();\r\n    return (\r\n      <Row>\r\n        <Col span={8}>\r\n          <Pagination \r\n            size=\"small\" \r\n            total={this.props.imageStore.totalImagesCount > 1000 ? 1000 : this.props.imageStore.totalImagesCount} // Maximum of 1000 results per query is allowed by NASA API\r\n            current={currentPage} \r\n            showTotal={this.showTotalAssets} \r\n            pageSize={100} \r\n            showQuickJumper \r\n            showSizeChanger={false}\r\n            onChange={this.onPageChange}\r\n            style={{paddingBottom: 20}}\r\n          />\r\n        </Col>\r\n        <Col span={8} offset={8} style={{textAlign: \"right\"}}>\r\n          <Switch\r\n            checkedChildren={<PictureOutlined />}\r\n            unCheckedChildren={<UnorderedListOutlined />}\r\n            onChange={this.onViewChange}\r\n            defaultChecked\r\n          />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { List, Col, Typography, Spin } from 'antd';\r\nimport { ImagePreview } from './ImagePreview';\r\n\r\nconst { Text } = Typography;\r\nconst { Item } = List;\r\n\r\ninterface LikedImagesProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class LikedImages extends React.Component<LikedImagesProps, {}> {\r\n  async componentDidMount(): Promise<void> {\r\n    await this.props.imageUiStore.loadLikedImages();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <List \r\n        grid={{\r\n          gutter: 16,\r\n          xs: 1,\r\n          sm: 2,\r\n          md: 4,\r\n          lg: 4,\r\n          xl: 6,\r\n          xxl: 3,\r\n        }}\r\n        dataSource={this.props.imageStore.likedImagesList}\r\n        renderItem={imageData => (\r\n          <Item key={imageData.id}>\r\n            <ImagePreview image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} />\r\n          </Item>\r\n        )}\r\n      >\r\n        {\r\n          this.props.imageUiStore.getIsLikeLoading() ? <Spin size=\"large\" /> :\r\n          this.props.imageStore.likedImagesList.length <= 0 ? <Col span={8}><Text>No liked images to display</Text></Col> : null\r\n        }\r\n      </List>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Typography, Spin, Modal, Image, Tag, Descriptions, Divider } from 'antd';\r\nimport moment from 'moment';\r\nimport { observer } from 'mobx-react';\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\n\r\nconst { Text } = Typography;\r\nconst { Item } = Descriptions;\r\n\r\ninterface AssetModalProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class AssetModal extends React.Component<AssetModalProps, {}> {\r\n  handleClose = (): void => {\r\n    this.props.imageUiStore.setIsDetailsOpen(false);\r\n    this.props.imageUiStore.resetImageDetails();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const image = this.props.imageStore.imageDetails.image;\r\n    const visible = this.props.imageUiStore.getIsDetailsOpen();\r\n    const loading = this.props.imageUiStore.getIsDetailsLoading();\r\n    \r\n    return (\r\n      <Modal \r\n        title={image ? image.title : \"Details\"}\r\n        visible={visible} \r\n        onOk={this.handleClose} \r\n        onCancel={this.handleClose}\r\n        footer={null}\r\n        style={{minWidth: 1000}}\r\n      >\r\n        <div style={{margin: 20}}>\r\n          {\r\n          loading ? <Spin size=\"large\" /> :\r\n          !image ? \"No image selected\" : \r\n          <React.Fragment>\r\n            <div style={{textAlign: \"center\"}}>\r\n              <Image\r\n                src={image.imgUrl}\r\n              />\r\n            </div>\r\n            <Descriptions bordered style={{paddingTop: 20, paddingBottom: 20}}>\r\n              <Item label=\"Date Created\">{moment(image.date).format(\"MMM D YYYY, h:mm:ss a\")}</Item>\r\n              <Item label=\"Center\">{image.center}</Item>\r\n              <Item label=\"Location\">{image.location}</Item>\r\n            </Descriptions>\r\n            <Text>{image.description}</Text>\r\n            <Divider />\r\n            {image.keywords?.map((word) => {\r\n              return <Tag key={word.toLowerCase()}>{word.toLowerCase()}</Tag>\r\n            })}\r\n          </React.Fragment>\r\n          }\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import { ImageStore } from './store/ImageStore';\nimport { ImageUiStore } from './store/ImageUiStore';\nimport { Layout, Typography, Input, Collapse } from 'antd'\nimport './App.css';\nimport { SearchPage } from './view-image-list/SearchPage';\nimport { QueryBar } from './view-image-list/QueryBar';\nimport { LikedImages } from './view-image-list/LikedImages';\nimport { AssetModal } from './view-asset/AssetModal';\n\nconst { Header, Content, Footer } = Layout;\nconst { Title } = Typography;\nconst { Search } = Input;\nconst { Panel } = Collapse;\n\nconst imageStore = new ImageStore();\nconst imageUiStore = new ImageUiStore(imageStore);\n\nfunction App(): JSX.Element {\n  const handleSearch = (search: string) => {\n    imageUiStore.setSearch(search);\n    imageUiStore.loadSearchResults();\n  }\n  const resetSearch = () => {\n    handleSearch(\"\");\n  }\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Header>\n        <Title style={{paddingTop: 5, color: 'white'}} onClick={resetSearch}>Spacegram: Unofficial NASA Photobook</Title>\n      </Header>\n      <Content style={{margin: 50, minWidth: 1000}}>\n        <Collapse defaultActiveKey={['1']} style={{marginBottom: 20}}>\n          <Panel header=\"Liked Images\" key=\"1\">\n            <LikedImages imageStore={imageStore} imageUiStore={imageUiStore} />\n          </Panel>\n        </Collapse>\n        <Search style={{paddingBottom: 30}} placeholder=\"Search images\" onSearch={handleSearch} enterButton size=\"large\" />\n        <QueryBar imageStore={imageStore} imageUiStore={imageUiStore} />\n        <SearchPage imageStore={imageStore} imageUiStore={imageUiStore} />\n        <AssetModal imageStore={imageStore} imageUiStore={imageUiStore} />\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Created by Eric Pham for Shopify&apos;s Front End Developer Intern Challenge - Winter 2022. Utilizes the NASA Image and Video Library API (images.nasa.gov API) for search results.</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}