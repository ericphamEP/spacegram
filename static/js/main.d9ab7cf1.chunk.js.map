{"version":3,"sources":["service/ApiQueryBuilder.ts","service/ImageService.tsx","store/ImageStore.ts","store/ImageUiStore.ts","view-image-list/ImagePreview.tsx","view-image-list/GridView.tsx","view-image-list/ImageListPreview.tsx","view-image-list/ListView.tsx","view-image-list/SearchPage.tsx","view-image-list/QueryBar.tsx","view-image-list/LikedImages.tsx","view-asset/AssetModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiQueryBuilder","root","search","filters","page","assetId","a","params","q","nasa_id","media_type","axios","get","this","response","totalImagesCount","data","collection","metadata","total_hits","imageDataList","items","map","imageItem","_mapResponseDataToFormattedData","images","assetIds","concat","length","_mapResponseDataToFormattedDataFull","resData","id","title","imgUrl","links","href","date","date_created","description","image","location","center","keywords","ImageService","queryService","getImages","_showError","getImagesFromIds","imageDetails","undefined","getImageDetails","msg","err","notification","message","console","log","ImageStore","imageService","imagesList","likedImages","likedImagesList","onLike","localStorage","setItem","JSON","stringify","fetchLikedImages","setImagesList","setTotalImagesCount","count","setLikedImagesList","setImageDetails","imageData","makeAutoObservable","initialLikedImages","getItem","parse","getImagesSearch","imagesObj","Object","keys","imageObj","ImageUiStore","imageStore","currentSearch","selectedFilter","isLoading","isLikeLoading","isDetailsLoading","isDetailsOpen","isListView","loadImageDetails","setIsDetailsLoading","setIsDetailsOpen","fetchImageDetails","newSearch","setPage","status","newPage","value","removeFilter","loadSearchResults","filterType","setIsLoading","fetchImagesSearch","setIsLikeLoading","Meta","Card","Paragraph","Typography","ImagePreview","hoverable","size","style","height","margin","overflow","cover","marginTop","display","marginLeft","marginRight","alt","props","src","actions","FileSearchOutlined","onClick","onDetail","liked","HeartFilled","HeartOutlined","Fragment","ellipsis","rows","moment","format","React","Component","GridView","observer","gutter","span","imageUiStore","Item","List","ImageListPreview","extra","width","ListView","itemLayout","bordered","padding","backgroundColor","Title","SearchPage","getIsLoading","level","getIsListView","Text","QueryBar","mapFilterKeysToNames","description_508","photographer","secondary_creator","year_start","year_end","showTotalAssets","total","range","onPageChange","onViewChange","checked","setIsListView","onFilterOptionChange","option","setSelectedFilter","onFilterValueChange","input","editFilter","target","onFilterDateChange","dateString","year","onRemoveFilter","currentPage","getPage","getFilters","current","showTotal","pageSize","showQuickJumper","showSizeChanger","onChange","paddingBottom","offset","textAlign","checkedChildren","PictureOutlined","unCheckedChildren","UnorderedListOutlined","defaultChecked","trigger","content","Group","compact","defaultValue","getSelectedFilter","showSearch","marginBottom","filterValue","Option","picker","placeholder","allowClear","key","closable","onClose","LikedImages","loadLikedImages","grid","xs","sm","md","lg","xl","xxl","dataSource","renderItem","getIsLikeLoading","Descriptions","AssetModal","handleClose","resetImageDetails","visible","getIsDetailsOpen","loading","getIsDetailsLoading","onOk","onCancel","footer","minWidth","paddingTop","label","word","toLowerCase","Header","Layout","Content","Footer","Search","Input","Panel","Collapse","App","handleSearch","setSearch","minHeight","color","defaultActiveKey","header","onSearch","enterButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9ab7cf1.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport axios from \"axios\";\r\nimport { Images, Image, FilterParams, AssetDetails, ImageDataFull } from \"./ImageInterfaces\";\r\n\r\nexport class ApiQueryBuilder {\r\n    root = \"https://images-api.nasa.gov\";\r\n\r\n    async getImages(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<Images> {\r\n        /*\r\n        Send request for images using search endpoint\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        :return: Images object with list and count\r\n        */\r\n        const params = {q: search, page, nasa_id: assetId, media_type: \"image\", ...filters};\r\n        const response = await axios.get(`${this.root}/search`, { params });\r\n        const totalImagesCount = response.data.collection.metadata.total_hits;\r\n        const imageDataList = response.data.collection.items.map((imageItem: any) => this._mapResponseDataToFormattedData(imageItem))\r\n        return {images: imageDataList, totalImagesCount };\r\n    }\r\n\r\n    async getImagesFromIds(assetIds: string[]): Promise<Images> {\r\n        /*\r\n        Send requests for images using search endpoint and assetId params\r\n        :input assetIds: List of NASA ID strings\r\n        :return: Images object with list and count\r\n        */\r\n        let imageDataList: Image[] = [];\r\n        for (const assetId of assetIds) {\r\n            const params = {nasa_id: assetId, media_type: \"image\"};\r\n            const response = await axios.get(`${this.root}/search`, { params });\r\n            imageDataList = imageDataList.concat(response.data.collection.items.map((imageItem: any) => this._mapResponseDataToFormattedData(imageItem)));\r\n        }\r\n        return {images: imageDataList, totalImagesCount: imageDataList.length };\r\n    }\r\n\r\n    async getImageDetails(assetId: string): Promise<AssetDetails> {\r\n        /*\r\n        Send request for image using search endpoint, get full details\r\n        :input assetId: NASA ID string\r\n        :return: Image object with full details\r\n        */\r\n        const response = await axios.get(`${this.root}/search`, {params: {nasa_id: assetId}});\r\n        return this._mapResponseDataToFormattedDataFull(response.data.collection.items[0]);\r\n    }\r\n\r\n    private _mapResponseDataToFormattedData(resData: any): Image {\r\n        return {\r\n            id: resData.data[0].nasa_id,\r\n            title: resData.data[0].title,\r\n            imgUrl: resData.links[0].href,\r\n            date: resData.data[0].date_created,\r\n            description: resData.data[0].description,\r\n        } as Image\r\n    }\r\n\r\n    private _mapResponseDataToFormattedDataFull(resData: any): AssetDetails {\r\n        return {\r\n            image: {\r\n                ...this._mapResponseDataToFormattedData(resData),\r\n                location: resData.data[0].location,\r\n                center: resData.data[0].center,\r\n                keywords: resData.data[0].keywords,\r\n            } as ImageDataFull\r\n        } \r\n    }\r\n}","import { ApiQueryBuilder } from \"./ApiQueryBuilder\";\r\nimport { Images, FilterParams, AssetDetails } from \"./ImageInterfaces\";\r\nimport { notification } from \"antd\";\r\n\r\nexport class ImageService {\r\n    queryService = new ApiQueryBuilder();\r\n\r\n    async getImagesSearch(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<Images> {\r\n        /*\r\n        Search images using variety of params\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        :return: Images object with list and count\r\n        */\r\n        let images: Images = {images: [], totalImagesCount: 0};\r\n        try {\r\n            images = await this.queryService.getImages(search, filters, page, assetId);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch images for search\", err);\r\n        }\r\n        return images;\r\n    }\r\n\r\n    async getImagesFromIds(assetIds: string[]): Promise<Images> {\r\n        /*\r\n        Search images with list of IDs\r\n        :input assetIds: List of NASA ID strings\r\n        :return: Images object with list and count\r\n        */\r\n        let images: Images = {images: [], totalImagesCount: 0};\r\n        try {\r\n            images = await this.queryService.getImagesFromIds(assetIds);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch for group of images\", err);\r\n        }\r\n        return images;\r\n    }\r\n\r\n    async getImageDetails(assetId: string): Promise<AssetDetails> {\r\n        /*\r\n        Get full image details\r\n        :input assetId: NASA ID string\r\n        :return: Image object with full details\r\n        */\r\n        let imageDetails: AssetDetails = {image: undefined};\r\n        try {\r\n            imageDetails = await this.queryService.getImageDetails(assetId);\r\n        } catch (err) {\r\n            this._showError(\"Could not fetch image details\", err);\r\n        }\r\n        return imageDetails;\r\n    }\r\n\r\n    private _showError(msg: string, err: unknown): void {\r\n        /*\r\n        Display message notification to user and log error\r\n        :input msg: Message string\r\n        :input err: Error object\r\n        */\r\n        notification['error']({\r\n            message: \"Image Service Error\",\r\n            description: msg,\r\n        });\r\n        console.log(`[image-service-error] ${err}`)\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { ImageService } from \"../service/ImageService\";\r\nimport { Image, AssetDetails, FilterParams } from \"../service/ImageInterfaces\";\r\n\r\nexport class ImageStore {\r\n    imageService = new ImageService();\r\n    imagesList: Image[] = [];\r\n    totalImagesCount = 0;\r\n    imageDetails: AssetDetails = {image: undefined};\r\n    likedImages: {[key: string]: boolean} = {};\r\n    likedImagesList: Image[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        try { // Initialize with local storage if available\r\n            const initialLikedImages = localStorage.getItem( 'likedImages' );\r\n            this.likedImages = initialLikedImages ? JSON.parse(initialLikedImages) : {}\r\n        } catch {\r\n            this.likedImages = {};\r\n        }\r\n    }\r\n\r\n    // Main functions\r\n\r\n    async fetchImagesSearch(search?: string, filters?: FilterParams, page?: number, assetId?: string): Promise<void> {\r\n        /*\r\n        Fetch and save images using variety of params\r\n        :input search: Search string\r\n        :input filters: Filter params object\r\n        :input page: Page number\r\n        :input assetId: NASA ID string\r\n        */\r\n        const imagesObj = await this.imageService.getImagesSearch(search, filters, page, assetId);\r\n        this.setImagesList(imagesObj.images);\r\n        this.setTotalImagesCount(imagesObj.totalImagesCount);\r\n    }\r\n\r\n    async fetchLikedImages(): Promise<void> {\r\n        /*\r\n        Fetch and save liked images\r\n        */\r\n        const imagesObj = await this.imageService.getImagesFromIds(Object.keys(this.likedImages));\r\n        this.setLikedImagesList(imagesObj.images);\r\n    }\r\n\r\n    async fetchImageDetails(assetId: string): Promise<void> {\r\n        /*\r\n        Fetch and save full image details\r\n        :input assetId: NASA ID string\r\n        */\r\n        const imageObj = await this.imageService.getImageDetails(assetId);\r\n        this.setImageDetails(imageObj);\r\n    }\r\n\r\n    onLike = async (assetId: string): Promise<void> => {\r\n        /*\r\n        Save or remove liked image\r\n        :input assetId: NASA ID string\r\n        */\r\n        if (assetId in this.likedImages) {\r\n            delete this.likedImages[assetId];\r\n        } else {\r\n            this.likedImages[assetId] = true;\r\n        }\r\n        localStorage.setItem( 'likedImages', JSON.stringify(this.likedImages) ); // Save to local\r\n        await this.fetchLikedImages();\r\n    }\r\n\r\n    // Setters for observable state\r\n\r\n    setImagesList = (imagesList: Image[]): void => {\r\n        this.imagesList = imagesList;\r\n    }\r\n    setTotalImagesCount = (count: number): void => {\r\n        this.totalImagesCount = count;\r\n    }\r\n    setLikedImagesList = (imagesList: Image[]): void => {\r\n        this.likedImagesList = imagesList;\r\n    }\r\n    setImageDetails = (imageData: AssetDetails): void => {\r\n        this.imageDetails = imageData;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { ImageStore } from \"./ImageStore\";\r\n\r\nexport class ImageUiStore {\r\n    private imageStore: ImageStore;\r\n    private currentSearch = \"\";\r\n    private filters: {[x: string]: string} = {};\r\n    private page = 1;\r\n    private selectedFilter = \"title\";\r\n\r\n    private isLoading = false;\r\n    private isLikeLoading = false;\r\n    private isDetailsLoading = false;\r\n    private isDetailsOpen = false;\r\n    private isListView = false;\r\n\r\n    constructor(imageStore: ImageStore) {\r\n        makeAutoObservable(this);\r\n        this.imageStore = imageStore;\r\n    }\r\n\r\n    // Getters and setters\r\n\r\n    getSearch(): string {\r\n        return this.currentSearch;\r\n    }\r\n    setSearch(newSearch: string): void {\r\n        this.currentSearch = newSearch;\r\n        this.setPage(1);\r\n    }\r\n\r\n    getIsLoading(): boolean {\r\n        return this.isLoading;\r\n    }\r\n    setIsLoading(status: boolean): void {\r\n        this.isLoading = status;\r\n    }\r\n\r\n    getIsLikeLoading(): boolean {\r\n        return this.isLikeLoading;\r\n    }\r\n    setIsLikeLoading(status: boolean): void {\r\n        this.isLikeLoading = status;\r\n    }\r\n\r\n    getIsDetailsLoading(): boolean {\r\n        return this.isDetailsLoading;\r\n    }\r\n    setIsDetailsLoading(status: boolean): void {\r\n        this.isDetailsLoading = status;\r\n    }\r\n\r\n    getIsDetailsOpen(): boolean {\r\n        return this.isDetailsOpen;\r\n    }\r\n    setIsDetailsOpen(status: boolean): void {\r\n        this.isDetailsOpen = status;\r\n    }\r\n\r\n    getIsListView(): boolean {\r\n        return this.isListView;\r\n    }\r\n    setIsListView(status: boolean): void {\r\n        this.isListView = status;\r\n    }\r\n\r\n    getPage(): number {\r\n        return this.page;\r\n    }\r\n    setPage(newPage: number): void {\r\n        this.page = newPage;\r\n    }\r\n\r\n    getSelectedFilter(): string {\r\n        return this.selectedFilter;\r\n    }\r\n    setSelectedFilter(selectedFilter: string): void {\r\n        this.selectedFilter = selectedFilter;\r\n    }\r\n\r\n    getFilters(): {[x: string]: string} {\r\n        return this.filters;\r\n    }\r\n    editFilter(value: string): void {\r\n        if (!value || value == \"\") {\r\n            this.removeFilter(this.selectedFilter);\r\n        } else {\r\n            this.filters[this.selectedFilter] = value;\r\n        }\r\n        this.loadSearchResults();\r\n    }\r\n    removeFilter(filterType: string): void {\r\n        delete this.filters[filterType];\r\n        this.loadSearchResults();\r\n    }\r\n\r\n    resetImageDetails(): void {\r\n        this.imageStore.setImageDetails({image: undefined});\r\n    }\r\n\r\n    // Interact with main store\r\n\r\n    async loadSearchResults(): Promise<void> {\r\n        /*\r\n        Load search results\r\n        */\r\n        this.setIsLoading(true);\r\n        await this.imageStore.fetchImagesSearch(this.currentSearch, this.filters, this.page);\r\n        this.setIsLoading(false);\r\n    }\r\n\r\n    async loadLikedImages(): Promise<void> {\r\n        /*\r\n        Load liked images\r\n        */\r\n        this.setIsLikeLoading(true);\r\n        await this.imageStore.fetchLikedImages();\r\n        this.setIsLikeLoading(false);\r\n    }\r\n\r\n    loadImageDetails = async (assetId: string): Promise<void> => {\r\n        /*\r\n        Load full image details\r\n        :input assetId: NASA ID string\r\n        */\r\n        this.setIsDetailsLoading(true);\r\n        this.setIsDetailsOpen(true);\r\n        await this.imageStore.fetchImageDetails(assetId);\r\n        this.setIsDetailsLoading(false);\r\n    }\r\n}","import React from 'react';\r\nimport { Card, Typography, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport { HeartOutlined, HeartFilled, FileSearchOutlined } from '@ant-design/icons';\r\nimport { Image } from \"./../service/ImageInterfaces\";\r\n\r\nconst { Meta } = Card;\r\nconst { Paragraph } = Typography;\r\n\r\ninterface SearchPageProps {\r\n  image: Image,\r\n  liked: boolean,\r\n  onLike: (assetId: string) => void,\r\n  onDetail: (assetId: string) => void,\r\n}\r\n\r\nexport class ImagePreview extends React.Component<SearchPageProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Card\r\n        hoverable\r\n        size=\"small\"\r\n        style={{ height: 510, margin: 10, overflow: 'hidden' }}\r\n        cover={\r\n          <div style={{ overflow: \"hidden\", height: \"280px\", marginTop: 20 }}>\r\n            <img\r\n              style={{ height: \"100%\", display: 'block', marginLeft: \"auto\", marginRight: \"auto\" }}\r\n              alt={this.props.image.id}\r\n              src={this.props.image.imgUrl}\r\n            />\r\n          </div>\r\n        }\r\n        actions={[\r\n          <Tooltip title=\"View Details\" key=\"details\">\r\n            <FileSearchOutlined onClick={() => this.props.onDetail(this.props.image.id)} />\r\n          </Tooltip>,\r\n          <Tooltip title=\"Like Image\" key=\"like\">\r\n            {this.props.liked ? <HeartFilled onClick={() => this.props.onLike(this.props.image.id)} /> :\r\n            <HeartOutlined onClick={() => this.props.onLike(this.props.image.id)} />}\r\n          </Tooltip>,\r\n        ]}\r\n      >\r\n        <Meta\r\n          title={this.props.image.title}\r\n          description={<React.Fragment><Paragraph ellipsis={{rows: 1}}>{moment(this.props.image.date).format(\"MMM D YYYY, h:mm:ss a\")}</Paragraph><Paragraph ellipsis={{rows: 3}}>{this.props.image.description}</Paragraph></React.Fragment>}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\nimport { Row, Col } from 'antd';\r\nimport { ImagePreview } from './ImagePreview';\r\n\r\ninterface GridViewProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class GridView extends React.Component<GridViewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Row gutter={16}>\r\n        {\r\n          this.props.imageStore.imagesList.map((imageData) => {\r\n            return <Col span={6} key={imageData.id}><ImagePreview image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} /></Col>\r\n          })\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { List, Typography, Tooltip } from 'antd';\r\nimport moment from 'moment';\r\nimport { HeartOutlined, HeartFilled, FileSearchOutlined } from '@ant-design/icons';\r\nimport { Image } from \"./../service/ImageInterfaces\";\r\n\r\nconst { Item } = List\r\nconst { Paragraph } = Typography;\r\n\r\ninterface ImageListPreviewProps {\r\n  image: Image,\r\n  liked: boolean,\r\n  onLike: (assetId: string) => void,\r\n  onDetail: (assetId: string) => void,\r\n}\r\n\r\n@observer\r\nexport class ImageListPreview extends React.Component<ImageListPreviewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Item\r\n        key={this.props.image.id}\r\n        actions={[\r\n          <Tooltip title=\"View Details\" key=\"details\">\r\n            <FileSearchOutlined onClick={() => this.props.onDetail(this.props.image.id)} />\r\n          </Tooltip>,\r\n          <Tooltip title=\"Like Image\" key=\"like\">\r\n            {this.props.liked ? <HeartFilled onClick={() => this.props.onLike(this.props.image.id)} /> :\r\n            <HeartOutlined onClick={() => this.props.onLike(this.props.image.id)} />}\r\n          </Tooltip>,\r\n        ]}\r\n        extra={\r\n          <img\r\n            width={350}\r\n            alt={this.props.image.id}\r\n            src={this.props.image.imgUrl}\r\n          />\r\n        }\r\n      >\r\n        <Item.Meta\r\n          title={this.props.image.title}\r\n          description={moment(this.props.image.date).format(\"MMM D YYYY, h:mm:ss a\")}\r\n        />\r\n        {<Paragraph ellipsis={{rows: 3}}>{this.props.image.description}</Paragraph>}\r\n      </Item>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { List } from 'antd';\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\nimport { ImageListPreview } from './ImageListPreview';\r\n\r\ninterface ListViewProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class ListView extends React.Component<ListViewProps, {}> {\r\n  render(): JSX.Element {\r\n    return (\r\n      <List\r\n        itemLayout=\"vertical\"\r\n        size=\"large\"\r\n        bordered\r\n        style={{padding: 70, backgroundColor: 'white'}}\r\n      >\r\n        {\r\n          this.props.imageStore.imagesList.map((imageData) => {\r\n            return <ImageListPreview key={imageData.id} image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} />\r\n          })\r\n        }\r\n      </List>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { Row, Col, Typography, Spin } from 'antd';\r\nimport { GridView } from './GridView';\r\nimport { ListView } from './ListView';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface SearchPageProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class SearchPage extends React.Component<SearchPageProps, {}> {\r\n  async componentDidMount(): Promise<void> {\r\n    await this.props.imageUiStore.loadSearchResults();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <Row gutter={8}>\r\n        {\r\n          this.props.imageUiStore.getIsLoading() ? <Spin size=\"large\" /> :\r\n          this.props.imageStore.imagesList.length <= 0 ? <Col span={8}><Title level={2}>No results :(</Title></Col> :\r\n          this.props.imageUiStore.getIsListView() ? <ListView imageStore={this.props.imageStore} imageUiStore={this.props.imageUiStore} /> : \r\n          <GridView imageStore={this.props.imageStore} imageUiStore={this.props.imageUiStore} />\r\n        }\r\n      </Row>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { Moment } from 'moment';\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { Col, Pagination, Row, Switch, Popover, Tag, Button, Input, Select, DatePicker, Typography } from 'antd';\r\nimport { PictureOutlined, UnorderedListOutlined } from '@ant-design/icons';\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface QueryBarProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class QueryBar extends React.Component<QueryBarProps, {}> {\r\n  mapFilterKeysToNames: { [x: string]: string } = {\r\n    description: \"Description\",\r\n    description_508: \"Description 508\",\r\n    keywords: \"Keywords\",\r\n    location: \"Location\",\r\n    photographer: \"Photographer\",\r\n    secondary_creator: \"Secondary Creator\",\r\n    title: \"Title\",\r\n    year_start: \"Year Start\",\r\n    year_end: \"Year End\",\r\n  }\r\n\r\n  showTotalAssets = (total: number, range: number[]): string => {\r\n    return `${range[0]}-${range[1]} of ${total} images`;\r\n  }\r\n  onPageChange = (page: number): void => {\r\n    this.props.imageUiStore.setPage(page);\r\n    this.props.imageUiStore.loadSearchResults();\r\n  }\r\n  onViewChange = (checked: boolean): void => {\r\n    this.props.imageUiStore.setIsListView(!checked);\r\n  }\r\n  onFilterOptionChange = (option: string): void => {\r\n    this.props.imageUiStore.setSelectedFilter(option);\r\n  }\r\n  onFilterValueChange = (input: any): void => {\r\n    this.props.imageUiStore.editFilter(input.target.value);\r\n  }\r\n  onFilterDateChange = (date: Moment | null, dateString: string): void => {\r\n    let year = \"\";\r\n    if (date) {\r\n      year = date?.format(\"YYYY\");\r\n    } else {\r\n      year = dateString;\r\n    }\r\n    this.props.imageUiStore.editFilter(year);\r\n  }\r\n  onRemoveFilter = (option: string): void => {\r\n    this.props.imageUiStore.removeFilter(option);\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const currentPage = this.props.imageUiStore.getPage();\r\n    const filters: { [x: string]: string } = this.props.imageUiStore.getFilters();\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col span={8}>\r\n            <Pagination\r\n              size=\"small\"\r\n              total={this.props.imageStore.totalImagesCount > 1000 ? 1000 : this.props.imageStore.totalImagesCount} // Maximum of 1000 results per query is allowed by NASA API\r\n              current={currentPage}\r\n              showTotal={this.showTotalAssets}\r\n              pageSize={100}\r\n              showQuickJumper\r\n              showSizeChanger={false}\r\n              onChange={this.onPageChange}\r\n              style={{ paddingBottom: 20 }}\r\n            />\r\n          </Col>\r\n          <Col span={8} offset={8} style={{ textAlign: \"right\" }}>\r\n            <Switch\r\n              checkedChildren={<PictureOutlined />}\r\n              unCheckedChildren={<UnorderedListOutlined />}\r\n              onChange={this.onViewChange}\r\n              defaultChecked\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Popover style={{ width: 200 }} trigger=\"click\" content={\r\n              <Input.Group compact>\r\n                <Select defaultValue={this.props.imageUiStore.getSelectedFilter()} onChange={this.onFilterOptionChange} showSearch style={{ width: 200, marginBottom: 10 }}>\r\n                  {Object.keys(this.mapFilterKeysToNames).map((filterValue) => <Select.Option value={filterValue} key={filterValue}>{this.mapFilterKeysToNames[filterValue]}</Select.Option>)}\r\n                </Select>\r\n                {this.props.imageUiStore.getSelectedFilter() == \"year_start\" || this.props.imageUiStore.getSelectedFilter() == \"year_end\" ?\r\n                  <DatePicker onChange={this.onFilterDateChange} picker=\"year\" /> : <Input placeholder={\"Enter filter value\"} onChange={this.onFilterValueChange} allowClear />}\r\n              </Input.Group>\r\n            }>\r\n              <Button>Add Filter</Button>\r\n            </Popover>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col style={{ marginTop: 20, marginBottom: 10 }}>\r\n            <Text>Filters: </Text>\r\n            {Object.keys(filters).map((key: string) =>\r\n              <Tag key={key} closable onClose={() => this.onRemoveFilter(key)}>{this.mapFilterKeysToNames[key]}: {filters[key]}</Tag>)}\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { observer } from \"mobx-react\"\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from './../store/ImageUiStore';\r\nimport { List, Col, Typography, Spin } from 'antd';\r\nimport { ImagePreview } from './ImagePreview';\r\n\r\nconst { Text } = Typography;\r\nconst { Item } = List;\r\n\r\ninterface LikedImagesProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class LikedImages extends React.Component<LikedImagesProps, {}> {\r\n  async componentDidMount(): Promise<void> {\r\n    await this.props.imageUiStore.loadLikedImages();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <List \r\n        grid={{\r\n          gutter: 16,\r\n          xs: 1,\r\n          sm: 2,\r\n          md: 4,\r\n          lg: 4,\r\n          xl: 6,\r\n          xxl: 3,\r\n        }}\r\n        dataSource={this.props.imageStore.likedImagesList}\r\n        renderItem={imageData => (\r\n          <Item key={imageData.id}>\r\n            <ImagePreview image={imageData} onDetail={this.props.imageUiStore.loadImageDetails} onLike={this.props.imageStore.onLike} liked={this.props.imageStore.likedImages[imageData.id]} />\r\n          </Item>\r\n        )}\r\n      >\r\n        {\r\n          this.props.imageUiStore.getIsLikeLoading() ? <Spin size=\"large\" /> :\r\n          this.props.imageStore.likedImagesList.length <= 0 ? <Col span={8}><Text>No liked images to display</Text></Col> : null\r\n        }\r\n      </List>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Typography, Spin, Modal, Image, Tag, Descriptions, Divider } from 'antd';\r\nimport moment from 'moment';\r\nimport { observer } from 'mobx-react';\r\nimport { ImageStore } from './../store/ImageStore';\r\nimport { ImageUiStore } from '../store/ImageUiStore';\r\n\r\nconst { Text } = Typography;\r\nconst { Item } = Descriptions;\r\n\r\ninterface AssetModalProps {\r\n  imageStore: ImageStore,\r\n  imageUiStore: ImageUiStore,\r\n}\r\n\r\n@observer\r\nexport class AssetModal extends React.Component<AssetModalProps, {}> {\r\n  handleClose = (): void => {\r\n    this.props.imageUiStore.setIsDetailsOpen(false);\r\n    this.props.imageUiStore.resetImageDetails();\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    const image = this.props.imageStore.imageDetails.image;\r\n    const visible = this.props.imageUiStore.getIsDetailsOpen();\r\n    const loading = this.props.imageUiStore.getIsDetailsLoading();\r\n    \r\n    return (\r\n      <Modal \r\n        title={image ? image.title : \"Details\"}\r\n        visible={visible} \r\n        onOk={this.handleClose} \r\n        onCancel={this.handleClose}\r\n        footer={null}\r\n        style={{minWidth: 1000}}\r\n      >\r\n        <div style={{margin: 20}}>\r\n          {\r\n          loading ? <Spin size=\"large\" /> :\r\n          !image ? \"No image selected\" : \r\n          <React.Fragment>\r\n            <div style={{textAlign: \"center\"}}>\r\n              <Image\r\n                src={image.imgUrl}\r\n              />\r\n            </div>\r\n            <Descriptions bordered style={{paddingTop: 20, paddingBottom: 20}}>\r\n              <Item label=\"Date Created\">{moment(image.date).format(\"MMM D YYYY, h:mm:ss a\")}</Item>\r\n              <Item label=\"Center\">{image.center}</Item>\r\n              <Item label=\"Location\">{image.location}</Item>\r\n            </Descriptions>\r\n            <Text>{image.description}</Text>\r\n            <Divider />\r\n            {image.keywords?.map((word) => {\r\n              return <Tag key={word.toLowerCase()}>{word.toLowerCase()}</Tag>\r\n            })}\r\n          </React.Fragment>\r\n          }\r\n        </div>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import { ImageStore } from './store/ImageStore';\nimport { ImageUiStore } from './store/ImageUiStore';\nimport { Layout, Typography, Input, Collapse } from 'antd'\nimport './App.css';\nimport { SearchPage } from './view-image-list/SearchPage';\nimport { QueryBar } from './view-image-list/QueryBar';\nimport { LikedImages } from './view-image-list/LikedImages';\nimport { AssetModal } from './view-asset/AssetModal';\n\nconst { Header, Content, Footer } = Layout;\nconst { Title } = Typography;\nconst { Search } = Input;\nconst { Panel } = Collapse;\n\nconst imageStore = new ImageStore();\nconst imageUiStore = new ImageUiStore(imageStore);\n\nfunction App(): JSX.Element {\n  const handleSearch = (search: string) => {\n    imageUiStore.setSearch(search);\n    imageUiStore.loadSearchResults();\n  }\n  const resetSearch = () => {\n    handleSearch(\"\");\n  }\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Header>\n        <Title style={{paddingTop: 5, color: 'white'}} onClick={resetSearch}>Spacegram: Unofficial NASA Photobook</Title>\n      </Header>\n      <Content style={{margin: 50, minWidth: 1000}}>\n        <Collapse defaultActiveKey={['1']} style={{marginBottom: 20}}>\n          <Panel header=\"Liked Images\" key=\"1\">\n            <LikedImages imageStore={imageStore} imageUiStore={imageUiStore} />\n          </Panel>\n        </Collapse>\n        <Search style={{paddingBottom: 30}} placeholder=\"Search images\" onSearch={handleSearch} enterButton size=\"large\" />\n        <QueryBar imageStore={imageStore} imageUiStore={imageUiStore} />\n        <SearchPage imageStore={imageStore} imageUiStore={imageUiStore} />\n        <AssetModal imageStore={imageStore} imageUiStore={imageUiStore} />\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Created by Eric Pham for Shopify&apos;s Front End Developer Intern Challenge - Winter 2022. Utilizes the NASA Image and Video Library API (images.nasa.gov API) for search results.</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}